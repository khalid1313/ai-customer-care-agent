            {/* Team Chat Tab */}
            <TabsContent value="chat" className="space-y-6">
              <div className="flex items-center gap-4 mb-4">
                <div className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                  <span className="text-sm text-gray-600">
                    {isConnected ? 'Connected to chat' : 'Connecting...'}
                  </span>
                </div>
                {chatRooms.length > 0 && (
                  <Badge variant="outline">
                    {chatRooms.length} chat{chatRooms.length !== 1 ? 's' : ''}
                  </Badge>
                )}
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-[600px]">
                {/* Compact Sidebar - Team & Chats */}
                <Card className="lg:col-span-1">
                  <CardContent className="p-0 h-full">
                    <div className="h-full flex flex-col">
                      {/* Team Members - Compact List */}
                      <div className="border-b border-gray-200">
                        <div className="p-3 bg-gray-50">
                          <h3 className="text-xs font-semibold text-gray-700 flex items-center gap-2">
                            <Users className="w-3 h-3" />
                            Team ({agents.filter(agent => agent.isActive && agent.id !== user?.id).length})
                          </h3>
                        </div>
                        <div className="p-2 max-h-32 overflow-y-auto">
                          <div className="flex flex-wrap gap-1">
                            {agents.filter(agent => agent.isActive && agent.id !== user?.id).slice(0, 6).map((agent) => {
                              const activityStatus = getActivityStatus(agent)
                              
                              return (
                                <div 
                                  key={agent.id} 
                                  className="flex items-center p-1 hover:bg-gray-50 cursor-pointer transition-colors group rounded"
                                  onClick={() => handleStartDirectChat(agent.id)}
                                  title={`${agent.firstName} ${agent.lastName} - ${agent.role}`}
                                >
                                  <div className="relative">
                                    <div className="w-6 h-6 bg-gradient-to-br from-gray-500 to-gray-600 rounded-full flex items-center justify-center text-white font-semibold text-xs">
                                      {agent.firstName?.[0]}{agent.lastName?.[0]}
                                    </div>
                                    <div className={`absolute -bottom-0.5 -right-0.5 w-2 h-2 rounded-full border border-white ${
                                      activityStatus.status === 'active' ? 'bg-green-500' : 
                                      activityStatus.status === 'idle' ? 'bg-yellow-500' :
                                      activityStatus.status === 'away' ? 'bg-orange-500' : 'bg-gray-400'
                                    }`}></div>
                                  </div>
                                </div>
                              )
                            })}
                            {agents.filter(agent => agent.isActive && agent.id !== user?.id).length > 6 && (
                              <div className="w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center text-gray-600 text-xs font-medium">
                                +{agents.filter(agent => agent.isActive && agent.id !== user?.id).length - 6}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                      
                      {/* Active Chats - Full List */}
                      <div className="flex-1 flex flex-col">
                        <div className="p-3 bg-gray-50 border-b border-gray-200">
                          <h3 className="text-xs font-semibold text-gray-700 flex items-center gap-2">
                            <MessageSquare className="w-3 h-3" />
                            Active Chats ({chatRooms.length})
                          </h3>
                        </div>
                        <div className="flex-1 overflow-y-auto">
                          {chatRooms.length > 0 ? (
                            <div className="space-y-1 p-2">
                              {chatRooms.map((room) => {
                                const otherParticipant = room.participants.find(p => p.userId !== user?.id)
                                const isSelected = selectedRoom?.id === room.id
                                
                                return (
                                  <div 
                                    key={room.id}
                                    className={`flex items-center p-2 hover:bg-gray-50 cursor-pointer transition-colors rounded ${
                                      isSelected ? 'bg-blue-50 border border-blue-200' : ''
                                    }`}
                                    onClick={() => selectRoom(room)}
                                  >
                                    <div className="flex items-center space-x-2 flex-1 min-w-0">
                                      <div className="relative">
                                        <div className="w-7 h-7 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white font-semibold text-xs">
                                          {otherParticipant ? 
                                            `${otherParticipant.user.firstName?.[0]}${otherParticipant.user.lastName?.[0]}` : 
                                            'GC'
                                          }
                                        </div>
                                        {room.type === 'direct' && otherParticipant && (
                                          <div className="absolute -bottom-0.5 -right-0.5 w-2 h-2 bg-green-500 rounded-full border border-white"></div>
                                        )}
                                      </div>
                                      <div className="flex-1 min-w-0">
                                        <p className="font-medium text-gray-900 text-xs truncate">
                                          {room.type === 'direct' && otherParticipant ? 
                                            `${otherParticipant.user.firstName} ${otherParticipant.user.lastName}` :
                                            room.name || `Group Chat`
                                          }
                                        </p>
                                        <p className="text-xs text-gray-500 truncate">
                                          {room.messages?.[0]?.content || 'Start chatting...'}
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                )
                              })}
                            </div>
                          ) : (
                            <div className="text-center text-gray-500 py-8">
                              <MessageSquare className="w-8 h-8 mx-auto mb-2 opacity-50" />
                              <p className="text-xs">No active chats</p>
                              <p className="text-xs text-gray-400">Start by messaging a team member</p>
                            </div>
                          )}
                        </div>
                        
                        {/* Quick Action */}
                        <div className="p-2 border-t border-gray-200">
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="w-full text-xs h-7"
                            onClick={() => {
                              console.log('Create group chat')
                            }}
                          >
                            <Plus className="w-3 h-3 mr-1" />
                            New Chat
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Main Chat Area with Integrated Context */}
                <Card className="lg:col-span-2">
                  <CardHeader className="border-b border-gray-200 pb-3">
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-lg flex items-center gap-2">
                          {selectedRoom ? (
                            <>
                              <MessageSquare className="w-5 h-5" />
                              {(() => {
                                const otherParticipant = selectedRoom.participants.find(p => p.userId !== user?.id);
                                return selectedRoom.type === 'direct' && otherParticipant ? 
                                  `${otherParticipant.user.firstName} ${otherParticipant.user.lastName}` :
                                  selectedRoom.name || 'Group Chat'
                              })()}
                            </>
                          ) : (
                            'Team Chat & Tickets'
                          )}
                        </CardTitle>
                        <CardDescription>
                          {selectedRoom ? 
                            'Real-time messaging with ticket integration' :
                            'Select a chat to start messaging or view recent tickets'
                          }
                        </CardDescription>
                      </div>
                      <div className="flex items-center gap-2">
                        {selectedRoom && (
                          <Button variant="outline" size="sm">
                            <Ticket className="w-4 h-4 mr-2" />
                            Tickets
                          </Button>
                        )}
                        <Button variant="outline" size="sm">
                          <Settings className="w-4 h-4 mr-2" />
                          Settings
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="h-[500px] p-0">
                    {selectedRoom ? (
                      <div className="flex h-full">
                        {/* Chat Messages Area - Expanded */}
                        <div className="flex-1 flex flex-col">
                          {/* Messages */}
                          <div className="flex-1 p-4 bg-gray-50 overflow-y-auto">
                            {messages.length > 0 ? (
                              <div className="space-y-4">
                                {messages.map((message) => {
                                  const isOwnMessage = message.senderId === user?.id
                                  const messageTime = new Date(message.createdAt).toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  })
                                  
                                  return (
                                    <div key={message.id} className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>
                                      <div className={`max-w-lg px-4 py-3 rounded-lg ${
                                        isOwnMessage 
                                          ? 'bg-blue-500 text-white' 
                                          : 'bg-white text-gray-900 border border-gray-200 shadow-sm'
                                      }`}>
                                        {!isOwnMessage && (
                                          <p className="text-xs font-medium mb-1 opacity-75">
                                            {message.sender.firstName} {message.sender.lastName}
                                          </p>
                                        )}
                                        <p className="text-sm leading-relaxed">{message.content}</p>
                                        {message.messageType === 'ticket_tag' && message.metadata && (
                                          <div className="mt-2 p-2 bg-blue-50 rounded text-xs">
                                            <div className="flex items-center gap-1 text-blue-700">
                                              <Ticket className="w-3 h-3" />
                                              <span className="font-medium">Ticket Referenced</span>
                                            </div>
                                            <p className="text-blue-600 mt-1">Click to view details</p>
                                          </div>
                                        )}
                                        <p className={`text-xs mt-2 ${isOwnMessage ? 'text-blue-100' : 'text-gray-500'}`}>
                                          {messageTime}
                                        </p>
                                      </div>
                                    </div>
                                  )
                                })}
                                
                                {/* Typing Indicators */}
                                {typingIndicators
                                  .filter(t => t.roomId === selectedRoom.id)
                                  .map((indicator) => (
                                    <div key={`${indicator.userId}-${indicator.roomId}`} className="flex justify-start">
                                      <div className="bg-gray-200 text-gray-600 px-4 py-2 rounded-lg text-sm">
                                        {indicator.userName} is typing...
                                      </div>
                                    </div>
                                  ))
                                }
                              </div>
                            ) : (
                              <div className="text-center text-gray-500 mt-20">
                                <MessageSquare className="w-12 h-12 mx-auto mb-4 opacity-50" />
                                <h3 className="font-medium text-gray-900 mb-2">Start the conversation</h3>
                                <p className="text-sm">Send the first message to begin chatting</p>
                              </div>
                            )}
                          </div>

                          {/* Message Input */}
                          <div className="border-t border-gray-200 p-4">
                            <div className="flex items-center space-x-2">
                              <Input 
                                placeholder="Type your message... (Use #TK-XXXXXX-XXX to tag tickets)"
                                className="flex-1"
                                value={messageInput}
                                onChange={(e) => {
                                  setMessageInput(e.target.value)
                                  if (selectedRoom && e.target.value.trim()) {
                                    handleTyping(selectedRoom.id)
                                  }
                                }}
                                onKeyPress={(e) => {
                                  if (e.key === 'Enter' && !e.shiftKey) {
                                    e.preventDefault()
                                    handleSendMessage()
                                  }
                                }}
                                disabled={isSendingMessage}
                              />
                              <Button 
                                onClick={handleSendMessage}
                                disabled={!messageInput.trim() || isSendingMessage}
                              >
                                {isSendingMessage ? (
                                  <RefreshCw className="w-4 h-4 animate-spin" />
                                ) : (
                                  <Send className="w-4 h-4" />
                                )}
                              </Button>
                            </div>
                            
                            <div className="mt-2 flex items-center gap-3 text-xs text-gray-500">
                              <span>Quick:</span>
                              <button 
                                className="text-blue-600 hover:text-blue-700 font-medium"
                                onClick={() => setMessageInput(prev => prev + '#TK-')}
                              >
                                + Ticket
                              </button>
                              <button 
                                className="text-green-600 hover:text-green-700 font-medium"
                                onClick={() => setMessageInput(prev => prev + '@')}
                              >
                                + Mention
                              </button>
                            </div>
                          </div>
                        </div>
                        
                        {/* Compact Context Panel */}
                        <div className="w-80 border-l border-gray-200 bg-white">
                          <div className="p-3 border-b border-gray-200">
                            <h3 className="font-medium text-gray-900 text-sm flex items-center gap-2">
                              <Ticket className="w-4 h-4" />
                              Recent Tickets & Context
                            </h3>
                          </div>
                          <div className="p-3 space-y-3 overflow-y-auto" style={{height: 'calc(100% - 60px)'}}>
                            {/* Recent Tickets */}
                            <div>
                              <h4 className="text-xs font-medium text-gray-700 mb-2">Recent Tickets</h4>
                              <div className="space-y-2">
                                {analytics.escalatedTickets.slice(0, 4).map((ticket, index) => (
                                  <div key={index} className="p-2 bg-gray-50 rounded text-xs cursor-pointer hover:bg-gray-100 transition-colors">
                                    <div className="flex items-center gap-2 mb-1">
                                      <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                                      <span className="font-medium text-gray-900">#{ticket.ticketNumber}</span>
                                      <span className={`px-1 py-0.5 rounded text-xs ${
                                        ticket.status === 'OPEN' ? 'bg-red-100 text-red-700' :
                                        ticket.status === 'IN_PROGRESS' ? 'bg-blue-100 text-blue-700' :
                                        'bg-orange-100 text-orange-700'
                                      }`}>
                                        {ticket.status}
                                      </span>
                                    </div>
                                    <p className="text-gray-600 truncate">{ticket.subject}</p>
                                    <p className="text-gray-500 text-xs mt-1">Escalated by: {ticket.escalatedBy}</p>
                                  </div>
                                ))}
                                {analytics.escalatedTickets.length === 0 && (
                                  <p className="text-xs text-gray-500 italic">No recent tickets</p>
                                )}
                              </div>
                            </div>
                            
                            {/* Agent Info */}
                            {(() => {
                              const otherParticipant = selectedRoom.participants.find(p => p.userId !== user?.id);
                              return otherParticipant && (
                                <div>
                                  <h4 className="text-xs font-medium text-gray-700 mb-2">Chat With</h4>
                                  <div className="p-2 bg-gray-50 rounded text-xs">
                                    <div className="flex items-center gap-2 mb-1">
                                      <div className="w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-xs">
                                        {otherParticipant.user.firstName?.[0]}{otherParticipant.user.lastName?.[0]}
                                      </div>
                                      <div>
                                        <p className="font-medium text-gray-900">{otherParticipant.user.firstName} {otherParticipant.user.lastName}</p>
                                        <p className="text-gray-600">{otherParticipant.user.role}</p>
                                      </div>
                                    </div>
                                    <p className="text-gray-500">{otherParticipant.user.email}</p>
                                  </div>
                                </div>
                              );
                            })()}
                            
                            {/* Quick Actions */}
                            <div>
                              <h4 className="text-xs font-medium text-gray-700 mb-2">Quick Actions</h4>
                              <div className="space-y-1">
                                <Button variant="outline" size="sm" className="w-full text-xs h-7">
                                  <Plus className="w-3 h-3 mr-1" />
                                  Create Ticket
                                </Button>
                                <Button variant="outline" size="sm" className="w-full text-xs h-7">
                                  <Search className="w-3 h-3 mr-1" />
                                  Search Tickets
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : (
                      {/* No Chat Selected - Show Recent Tickets */}
                      <div className="h-full p-6">
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 h-full">
                          {/* Recent Tickets List */}
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                              <Ticket className="w-5 h-5" />
                              Recent Tickets
                            </h3>
                            <div className="space-y-3 max-h-96 overflow-y-auto">
                              {analytics.escalatedTickets.slice(0, 8).map((ticket, index) => (
                                <div key={index} className="p-3 bg-white border border-gray-200 rounded-lg hover:shadow-sm transition-shadow cursor-pointer">
                                  <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center gap-2">
                                      <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                                      <span className="font-medium text-gray-900 text-sm">#{ticket.ticketNumber}</span>
                                    </div>
                                    <span className={`px-2 py-1 rounded text-xs font-medium ${
                                      ticket.status === 'OPEN' ? 'bg-red-100 text-red-700' :
                                      ticket.status === 'IN_PROGRESS' ? 'bg-blue-100 text-blue-700' :
                                      'bg-orange-100 text-orange-700'
                                    }`}>
                                      {ticket.status}
                                    </span>
                                  </div>
                                  <p className="text-gray-700 text-sm mb-2">{ticket.subject}</p>
                                  <div className="flex items-center justify-between text-xs text-gray-500">
                                    <span>Escalated by: {ticket.escalatedBy}</span>
                                    <span>{new Date(ticket.escalatedAt).toLocaleDateString()}</span>
                                  </div>
                                </div>
                              ))}
                              {analytics.escalatedTickets.length === 0 && (
                                <div className="text-center text-gray-500 py-8">
                                  <Ticket className="w-12 h-12 mx-auto mb-4 opacity-50" />
                                  <p className="text-sm">No recent tickets</p>
                                </div>
                              )}
                            </div>
                          </div>
                          
                          {/* Chat Welcome */}
                          <div className="flex items-center justify-center">
                            <div className="text-center text-gray-500">
                              <MessageSquare className="w-16 h-16 mx-auto mb-4 opacity-50" />
                              <h3 className="text-lg font-medium text-gray-900 mb-2">Team Chat</h3>
                              <p className="text-sm mb-4">Select a team member to start messaging</p>
                              <div className="grid grid-cols-1 gap-2 max-w-sm mx-auto text-xs">
                                <div className="bg-white p-2 rounded border border-gray-200">
                                  <strong>#TK-XXXXXX-XXX</strong> to reference tickets
                                </div>
                                <div className="bg-white p-2 rounded border border-gray-200">
                                  <strong>@agent</strong> to mention team members
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>